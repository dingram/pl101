{
	var makeLeftAssoc = function(head, tail) {
		var expr = head;
		for (var i = 0, l = tail.length; i < l; ++i) {
			var tmp = tail[i];
			expr = { tag:tmp[0], left:expr, right:tmp[1] };
		}
		return expr;
	};
}

start
	= statements

statements = statement*

statement "statement"
	= "var" rws v:identifier ws ";" ws
		{ return { tag:"var", name:v }; }
	/ "if" ws "(" ws expr:expression ws ")" ws "{" ws body:statements ws "}" ws else_body:else_block?
		{ return { tag:"if", expr:expr, body:body, else_body:else_body }; }
	/ "repeat" ws "(" ws expr:expression ws ")" ws "{" ws body:statements ws "}" ws
		{ return { tag:"repeat", expr:expr, body:body }; }
	/ "define" rws v:identifier ws "(" ws ")" ws "{" ws body:statements ws "}" ws
		{ return { tag:'define', name:v, args:[], body:body }; }
	/ "define" rws v:identifier ws "(" ws args:ident_list ws ")" ws "{" ws body:statements ws "}" ws
		{ return { tag:'define', name:v, args:args, body:body }; }
	/ v:identifier ws ":=" ws expr:expression ws ";" ws
		{ return { tag:":=", left:v, right:expr }; }
	/ expr:expression ws ";" ws
		{ return { tag:'ignore', body:expr }; }

else_block
	= "else" ws "{" ws body:statements ws "}" ws
		{ return body; }

comma_ident
	= "," ws v:identifier
		{ return v; }

ident_list "list of identifiers"
	= head:identifier tail:comma_ident*
		{ return [head].concat(tail); }

expression "expression"
	= comparative

comp_op = "<=" / ">=" / "!=" / "==" / "<" / ">"

comparative
	= left:additive ws op:comp_op ws right:comparative
		{ return {tag:op, left:left, right:right}; }
	/ additive

additive_op = [+-]

add_term
	= op:additive_op ws right:multiplicative ws
		{ return [ op, right ]; }

additive
	= v:multiplicative !add_term
		{ return v; }
	/ head:multiplicative tail:add_term*
		{ return makeLeftAssoc(head, tail); }

mult_op = [*/]

mult_term
	= op:mult_op ws right:exponential ws
		{ return [ op, right ]; }

multiplicative
	= v:exponential !mult_term
		{ return v; }
	/ head:exponential tail:mult_term*
		{ return makeLeftAssoc(head, tail); }

exponential
	= left:primary ws '**' ws right:exponential
		{ return { tag:'**', left:left, right:right }; }
	/ primary

identifier "identifier"
	= firstchar:[a-zA-Z_] chars:[0-9a-zA-Z_]*
		{ return firstchar + chars.join(''); }

primary
	= n:number ws
		{ return n; }
	/ v:identifier ws "(" ws ")" ws
		{ return {tag:"call", name:v, args:[]}; }
	/ v:identifier ws "(" ws args:arglist ws ")" ws
		{ return {tag:"call", name:v, args:args}; }
	/ v:identifier ws
		{ return { tag:"ident", name:v }; }
	/ "(" ws expr:expression ws ")" ws
		{ return expr; }

comma_expression = "," ws expr:expression
        { return expr; }

arglist "argument list"
    = first:expression rest:comma_expression*
        { return [first].concat(rest); }

number_frac
	= "." chars:[0-9]*
		{ return "." + chars.join(''); }

number "number"
	= sign:"-"? chars:[0-9]+ frac:number_frac?
		{ return parseFloat(sign + chars.join('') + frac); }

rws "whitespace"
	= [ \r\n\t]+

ws
	= rws?



/*

Operator Name        | Associativity | Operators
---------------------+---------------+-------------------------------------------------
Primary              | left to right | ()  [ ]  .  ->
Unary                | right to left | ++  --  +  -  !  ~
Exponentiation       | right to left | **
Multiplicative       | left to right | *  /  %
Additive             | left to right | +  -
Bitwise Shift        | left to right | <<  >>
Relational           | left to right | <  >  <=  >=
Equality             | left to right | ==  !=
Bitwise AND          | left to right | &
Bitwise Exclusive OR | left to right | ^
Bitwise Inclusive OR | left to right | |
Logical AND          | left to right | &&
Logical OR           | left to right | ||
Conditional          | right to left | ? :
Assignment           | right to left | =  +=  -=  *=   /=  <<=  >>=  %=   &=  ^=  |=
Comma                | left to right | ,

*/
