start
	= statements

statements = statement*

statement
    = v:identifier ws* ":=" ws* expr:expression ws* ";" ws*
        { return { tag:":=", left:v, right:expr }; }
    / "var" ws+ v:identifier ws* ";" ws*
        { return { tag:"var", name: v }; }
    / "if" ws* "(" ws* expr:expression ws* ")" ws* "{" ws* body:statements ws* "}" ws*
        { return { tag:"if", expr:expr, body:body }; }
    / "repeat" ws* "(" ws* expr:expression ws* ")" ws* "{" ws* body:statements ws* "}" ws*
        { return { tag:"repeat", expr:expr, body:body }; }
    / expr:expression ws* ";" ws*
        { return expr; }

expression
	= comparative

comp_op = "<=" / ">=" / "!=" / "==" / "<" / ">"

comparative
	= left:additive ws* op:comp_op ws* right:comparative
		{ return {tag: op, left:left, right:right}; }
	/ additive

additive_op = [+-]

additive
	= left:multiplicative ws* op:additive_op ws* right:additive
		{ return { tag: op, left: left, right: right }; }
	/ multiplicative

mult_op = [*/]

multiplicative
	= left:primary ws* op:mult_op ws* right:multiplicative
		{ return { tag: op, left: left, right: right }; }
	/ primary

identifier
	= firstchar:[a-zA-Z_] chars:[0-9a-zA-Z_]+
		{ return firstchar + chars.join(''); }

primary
	= number
    / v:identifier ws* "(" ws* ")"
        { return {tag:"call", name:v, args:[]}; }
    / v:identifier ws* "(" ws* args:arglist ws* ")"
        { return {tag:"call", name:v, args:args}; }
	/ v:identifier
		{ return { tag:"ident", name: v }; }
	/ "(" ws* expr:expression ws* ")"
		{ return expr; }

comma_expression = "," ws expr:expression
        { return expr; }

arglist
    = first:expression rest:comma_expression*
        { return [first].concat(rest); }

number_frac
	= "." chars:[0-9]*
		{ return "." + chars.join(''); }

number
	= sign:"-"? chars:[0-9]+ frac:number_frac?
		{ return parseFloat(sign + chars.join('') + frac); }

ws
	= [ \r\n\t]
