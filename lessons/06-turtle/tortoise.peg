{
	var makeLeftAssoc = function(head, tail) {
		var expr = head;
		for (var i = 0, l = tail.length; i < l; ++i) {
			var tmp = tail[i];
			expr = { tag:tmp[0], left:expr, right:tmp[1] };
		}
		return expr;
	};
}

start
	= statements

statements = statement*

statement "statement"
	= "var" rws v:var_list ws ";" ws
		{ return { tag:"var", vars:v }; }
	/ "if" ws "(" ws expr:expression ws ")" ws "{" ws body:statements ws "}" ws else_body:else_block?
		{ return { tag:"if", expr:expr, body:body, else_body:else_body }; }
	/ "repeat" ws "(" ws expr:expression ws ")" ws "{" ws body:statements ws "}" ws
		{ return { tag:"repeat", expr:expr, body:body }; }
	/ "define" rws v:identifier ws "(" ws ")" ws "{" ws body:statements ws "}" ws
		{ return { tag:'define', name:v, args:[], body:body }; }
	/ "define" rws v:identifier ws "(" ws args:var_list ws ")" ws "{" ws body:statements ws "}" ws
		{ return { tag:'define', name:v, args:args, body:body }; }
	/ v:identifier ws ":=" ws expr:expression ws ";" ws
		{ return { tag:":=", left:v, right:expr }; }
	/ expr:expression ws ";" ws
		{ return { tag:'ignore', body:expr }; }

else_block
	= "else" ws "{" ws body:statements ws "}" ws
		{ return body; }

comma_varlist
	= "," ws v:var_init
		{ return v; }

var_list
	= head:var_init tail:comma_varlist*
		{ return [head].concat(tail); }

var_init
	= n:identifier !":"
		{ return { name:n, value:undefined }; }
	/ n:identifier ws ":=" ws expr:expression ws
		{ return { name:n, value:expr }; }

expression "expression"
	= logical_disjunction
	/ dictionary

dictionary
	= "{" "}" ws
		{ return { tag:'dict', contents:{} }; }
	/ "{" ws v:dict_members ws "}" ws
		{ return { tag:'dict', contents:v }; }

dict_members
	= head:dict_member tail:comma_dict_member*
		{ var v = {}; v[head.n] = head.v; for (var i = 0, l = tail.length; i < l; ++i) { v[tail[i].n] = tail[i].v; }; return v; }

comma_dict_member
	= "," ws v:dict_member
		{ return v; }

dict_member
	= n:dict_key ":" ws v:expression
		{ return { n: n, v: v }; }

dict_key
	= identifier
	/ v:string
		 { return v.value; }

logic_disj_term
	= "||" ws right:equality ws
		{ return [ "||", right ]; }

logical_disjunction
	= v:logical_conjunction !logic_disj_term
		{ return v; }
	/ head:logical_conjunction tail:logic_disj_term*
		{ return makeLeftAssoc(head, tail); }

logic_conj_term
	= "&&" ws right:equality ws
		{ return [ "&&", right ]; }

logical_conjunction
	= v:equality !logic_conj_term
		{ return v; }
	/ head:equality tail:logic_conj_term*
		{ return makeLeftAssoc(head, tail); }

eq_op = "!=" / "=="

equality
	= left:comparative ws op:eq_op ws right:comparative
		{ return {tag:op, left:left, right:right}; }
	/ comparative

comp_op = "<=" / ">=" / "<" / ">"

comparative
	= left:additive ws op:comp_op ws right:additive
		{ return {tag:op, left:left, right:right}; }
	/ additive

additive_op = [+-]

add_term
	= op:additive_op ws right:multiplicative ws
		{ return [ op, right ]; }

additive
	= v:multiplicative !add_term
		{ return v; }
	/ head:multiplicative tail:add_term*
		{ return makeLeftAssoc(head, tail); }

mult_op = [*/%]

mult_term
	= op:mult_op ws right:exponential ws
		{ return [ op, right ]; }

multiplicative
	= v:exponential !mult_term
		{ return v; }
	/ head:exponential tail:mult_term*
		{ return makeLeftAssoc(head, tail); }

exponential
	= left:unary ws '**' ws right:exponential
		{ return { tag:'**', left:left, right:right }; }
	/ unary

unary
	= "-" ws expr:member_access
		{ return (typeof expr == 'number') ? -expr : { tag:'*', left:-1, right:expr }; }
	/ "!" ws expr:member_access
		{ return { tag:'!', expr:expr }; }
	/ member_access

sqStrChar
	= unescapedChar
	/ unicodeEscapeChar
	/ "\\" char:['\\] { return char; }
	/ "\\" char:. { return "\\"+char; }

dqStrChar
	= unescapedChar
	/ escapedChar

unescapedChar
	// any Unicode character except ' or " or \ or control character
	= [^'"\\\0-\x1F\x7f]

escapedChar
  = "\\'"  { return "'";  }
  / '\\"'  { return '"';  }
  / "\\\\" { return "\\"; }
  / "\\/"  { return "/";  }
  / "\\b"  { return "\b"; }
  / "\\f"  { return "\f"; }
  / "\\n"  { return "\n"; }
  / "\\r"  { return "\r"; }
  / "\\t"  { return "\t"; }
	/ unicodeEscapeChar

unicodeEscapeChar
  = "\\u" h1:hexDigit h2:hexDigit h3:hexDigit h4:hexDigit {
      return String.fromCharCode(parseInt("0x" + h1 + h2 + h3 + h4));
    }

hexDigit = [0-9a-fA-F]

sqString "single-quoted string"
	= "'" chars:sqStrChar* "'"
		{ return { tag:"string", value:chars.join('') }; }

dqString "double-quoted string"
	= '"' chars:dqStrChar* '"'
		{ return { tag:"string", value:chars.join('') }; }

string "string"
	= sqString
	/ dqString

identifier "identifier"
	= firstchar:[a-zA-Z_] chars:[0-9a-zA-Z_]* ws
		{ return firstchar + chars.join(''); }

accessor
	= "[" ws expr:expression ws "]" ws
		{ return expr; }
	/ "." ws name:identifier ws
		{ return { tag: "string", value: name }; }

member_access
	= base:primary accessors:accessor* ws
		{
			if (!accessors.length) {
				return base;
			} else {
				return { tag: 'subscript', expr: base, indices: accessors };
			}
		}

primary
	= n:number ws
		{ return n; }
	/ s:string ws
		{ return s; }
	/ 'undefined' ws
		{ return undefined; }
	/ 'null' ws
		{ return null; }
	/ 'true' ws
		{ return true; }
	/ 'false' ws
		{ return false; }
	/ "function" ws "(" ws ")" ws "{" ws body:statements ws "}" ws
		{ return { tag:'function', args:[], body:body }; }
	/ "function" ws "(" ws args:var_list ws ")" ws "{" ws body:statements ws "}" ws
		{ return { tag:'function', args:args, body:body }; }
	/ v:identifier ws "(" ws ")" ws
		{ return {tag:"call", name:v, args:[]}; }
	/ v:identifier ws "(" ws args:arglist ws ")" ws
		{ return {tag:"call", name:v, args:args}; }
	/ v:identifier ws
		{ return { tag:"ident", name:v }; }
	/ "(" ws expr:expression ws ")" ws
		{ return expr; }

comma_expression = "," ws expr:expression
        { return expr; }

arglist "argument list"
    = first:expression rest:comma_expression*
        { return [first].concat(rest); }

number_frac
	= "." chars:[0-9]*
		{ return "." + chars.join(''); }

number "number"
	= chars:[0-9]+ frac:number_frac?
		{ return parseFloat(chars.join('') + frac); }

rws "whitespace"
	= [ \r\n\t]+

ws
	= rws?



/*

Operator Name        | Associativity | Operators
---------------------+---------------+-------------------------------------------------
Primary              | left to right | ()  [ ]  .  ->
Unary                | right to left | ++  --  +  -  !  ~
Exponentiation       | right to left | **
Multiplicative       | left to right | *  /  %
Additive             | left to right | +  -
Bitwise Shift        | left to right | <<  >>
Relational           | left to right | <  >  <=  >=
Equality             | left to right | ==  !=
Bitwise AND          | left to right | &
Bitwise Exclusive OR | left to right | ^
Bitwise Inclusive OR | left to right | |
Logical AND          | left to right | &&
Logical OR           | left to right | ||
Conditional          | right to left | ? :
Assignment           | right to left | =  +=  -=  *=   /=  <<=  >>=  %=   &=  ^=  |=
Comma                | left to right | ,

*/
