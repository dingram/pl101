module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "additive": parse_additive,
        "additive_op": parse_additive_op,
        "arglist": parse_arglist,
        "comma_expression": parse_comma_expression,
        "comp_op": parse_comp_op,
        "comparative": parse_comparative,
        "identifier": parse_identifier,
        "mult_op": parse_mult_op,
        "multiplicative": parse_multiplicative,
        "number": parse_number,
        "number_frac": parse_number_frac,
        "primary": parse_primary,
        "statement": parse_statement,
        "statements": parse_statements,
        "ws": parse_ws
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "statements";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_statements() {
        var cacheKey = 'statements@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_statement();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_statement();
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statement() {
        var cacheKey = 'statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos8 = pos;
        var savedPos9 = pos;
        var result73 = parse_identifier();
        if (result73 !== null) {
          var result74 = [];
          var result84 = parse_ws();
          while (result84 !== null) {
            result74.push(result84);
            var result84 = parse_ws();
          }
          if (result74 !== null) {
            if (input.substr(pos, 2) === ":=") {
              var result75 = ":=";
              pos += 2;
            } else {
              var result75 = null;
              if (reportMatchFailures) {
                matchFailed("\":=\"");
              }
            }
            if (result75 !== null) {
              var result76 = [];
              var result83 = parse_ws();
              while (result83 !== null) {
                result76.push(result83);
                var result83 = parse_ws();
              }
              if (result76 !== null) {
                var result77 = parse_comparative();
                if (result77 !== null) {
                  var result78 = [];
                  var result82 = parse_ws();
                  while (result82 !== null) {
                    result78.push(result82);
                    var result82 = parse_ws();
                  }
                  if (result78 !== null) {
                    if (input.substr(pos, 1) === ";") {
                      var result79 = ";";
                      pos += 1;
                    } else {
                      var result79 = null;
                      if (reportMatchFailures) {
                        matchFailed("\";\"");
                      }
                    }
                    if (result79 !== null) {
                      var result80 = [];
                      var result81 = parse_ws();
                      while (result81 !== null) {
                        result80.push(result81);
                        var result81 = parse_ws();
                      }
                      if (result80 !== null) {
                        var result71 = [result73, result74, result75, result76, result77, result78, result79, result80];
                      } else {
                        var result71 = null;
                        pos = savedPos9;
                      }
                    } else {
                      var result71 = null;
                      pos = savedPos9;
                    }
                  } else {
                    var result71 = null;
                    pos = savedPos9;
                  }
                } else {
                  var result71 = null;
                  pos = savedPos9;
                }
              } else {
                var result71 = null;
                pos = savedPos9;
              }
            } else {
              var result71 = null;
              pos = savedPos9;
            }
          } else {
            var result71 = null;
            pos = savedPos9;
          }
        } else {
          var result71 = null;
          pos = savedPos9;
        }
        var result72 = result71 !== null
          ? (function(v, expr) { return { tag:":=", left:v, right:expr }; })(result71[0], result71[4])
          : null;
        if (result72 !== null) {
          var result70 = result72;
        } else {
          var result70 = null;
          pos = savedPos8;
        }
        if (result70 !== null) {
          var result0 = result70;
        } else {
          var savedPos6 = pos;
          var savedPos7 = pos;
          if (input.substr(pos, 3) === "var") {
            var result61 = "var";
            pos += 3;
          } else {
            var result61 = null;
            if (reportMatchFailures) {
              matchFailed("\"var\"");
            }
          }
          if (result61 !== null) {
            var result69 = parse_ws();
            if (result69 !== null) {
              var result62 = [];
              while (result69 !== null) {
                result62.push(result69);
                var result69 = parse_ws();
              }
            } else {
              var result62 = null;
            }
            if (result62 !== null) {
              var result63 = parse_identifier();
              if (result63 !== null) {
                var result64 = [];
                var result68 = parse_ws();
                while (result68 !== null) {
                  result64.push(result68);
                  var result68 = parse_ws();
                }
                if (result64 !== null) {
                  if (input.substr(pos, 1) === ";") {
                    var result65 = ";";
                    pos += 1;
                  } else {
                    var result65 = null;
                    if (reportMatchFailures) {
                      matchFailed("\";\"");
                    }
                  }
                  if (result65 !== null) {
                    var result66 = [];
                    var result67 = parse_ws();
                    while (result67 !== null) {
                      result66.push(result67);
                      var result67 = parse_ws();
                    }
                    if (result66 !== null) {
                      var result59 = [result61, result62, result63, result64, result65, result66];
                    } else {
                      var result59 = null;
                      pos = savedPos7;
                    }
                  } else {
                    var result59 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result59 = null;
                  pos = savedPos7;
                }
              } else {
                var result59 = null;
                pos = savedPos7;
              }
            } else {
              var result59 = null;
              pos = savedPos7;
            }
          } else {
            var result59 = null;
            pos = savedPos7;
          }
          var result60 = result59 !== null
            ? (function(v) { return { tag:"var", name: v }; })(result59[2])
            : null;
          if (result60 !== null) {
            var result58 = result60;
          } else {
            var result58 = null;
            pos = savedPos6;
          }
          if (result58 !== null) {
            var result0 = result58;
          } else {
            var savedPos4 = pos;
            var savedPos5 = pos;
            if (input.substr(pos, 2) === "if") {
              var result37 = "if";
              pos += 2;
            } else {
              var result37 = null;
              if (reportMatchFailures) {
                matchFailed("\"if\"");
              }
            }
            if (result37 !== null) {
              var result38 = [];
              var result57 = parse_ws();
              while (result57 !== null) {
                result38.push(result57);
                var result57 = parse_ws();
              }
              if (result38 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result39 = "(";
                  pos += 1;
                } else {
                  var result39 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result39 !== null) {
                  var result40 = [];
                  var result56 = parse_ws();
                  while (result56 !== null) {
                    result40.push(result56);
                    var result56 = parse_ws();
                  }
                  if (result40 !== null) {
                    var result41 = parse_comparative();
                    if (result41 !== null) {
                      var result42 = [];
                      var result55 = parse_ws();
                      while (result55 !== null) {
                        result42.push(result55);
                        var result55 = parse_ws();
                      }
                      if (result42 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result43 = ")";
                          pos += 1;
                        } else {
                          var result43 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result43 !== null) {
                          var result44 = [];
                          var result54 = parse_ws();
                          while (result54 !== null) {
                            result44.push(result54);
                            var result54 = parse_ws();
                          }
                          if (result44 !== null) {
                            if (input.substr(pos, 1) === "{") {
                              var result45 = "{";
                              pos += 1;
                            } else {
                              var result45 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"{\"");
                              }
                            }
                            if (result45 !== null) {
                              var result46 = [];
                              var result53 = parse_ws();
                              while (result53 !== null) {
                                result46.push(result53);
                                var result53 = parse_ws();
                              }
                              if (result46 !== null) {
                                var result47 = parse_statements();
                                if (result47 !== null) {
                                  var result48 = [];
                                  var result52 = parse_ws();
                                  while (result52 !== null) {
                                    result48.push(result52);
                                    var result52 = parse_ws();
                                  }
                                  if (result48 !== null) {
                                    if (input.substr(pos, 1) === "}") {
                                      var result49 = "}";
                                      pos += 1;
                                    } else {
                                      var result49 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"}\"");
                                      }
                                    }
                                    if (result49 !== null) {
                                      var result50 = [];
                                      var result51 = parse_ws();
                                      while (result51 !== null) {
                                        result50.push(result51);
                                        var result51 = parse_ws();
                                      }
                                      if (result50 !== null) {
                                        var result35 = [result37, result38, result39, result40, result41, result42, result43, result44, result45, result46, result47, result48, result49, result50];
                                      } else {
                                        var result35 = null;
                                        pos = savedPos5;
                                      }
                                    } else {
                                      var result35 = null;
                                      pos = savedPos5;
                                    }
                                  } else {
                                    var result35 = null;
                                    pos = savedPos5;
                                  }
                                } else {
                                  var result35 = null;
                                  pos = savedPos5;
                                }
                              } else {
                                var result35 = null;
                                pos = savedPos5;
                              }
                            } else {
                              var result35 = null;
                              pos = savedPos5;
                            }
                          } else {
                            var result35 = null;
                            pos = savedPos5;
                          }
                        } else {
                          var result35 = null;
                          pos = savedPos5;
                        }
                      } else {
                        var result35 = null;
                        pos = savedPos5;
                      }
                    } else {
                      var result35 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result35 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result35 = null;
                  pos = savedPos5;
                }
              } else {
                var result35 = null;
                pos = savedPos5;
              }
            } else {
              var result35 = null;
              pos = savedPos5;
            }
            var result36 = result35 !== null
              ? (function(expr, body) { return { tag:"if", expr:expr, body:body }; })(result35[4], result35[10])
              : null;
            if (result36 !== null) {
              var result34 = result36;
            } else {
              var result34 = null;
              pos = savedPos4;
            }
            if (result34 !== null) {
              var result0 = result34;
            } else {
              var savedPos2 = pos;
              var savedPos3 = pos;
              if (input.substr(pos, 6) === "repeat") {
                var result13 = "repeat";
                pos += 6;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"repeat\"");
                }
              }
              if (result13 !== null) {
                var result14 = [];
                var result33 = parse_ws();
                while (result33 !== null) {
                  result14.push(result33);
                  var result33 = parse_ws();
                }
                if (result14 !== null) {
                  if (input.substr(pos, 1) === "(") {
                    var result15 = "(";
                    pos += 1;
                  } else {
                    var result15 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result15 !== null) {
                    var result16 = [];
                    var result32 = parse_ws();
                    while (result32 !== null) {
                      result16.push(result32);
                      var result32 = parse_ws();
                    }
                    if (result16 !== null) {
                      var result17 = parse_comparative();
                      if (result17 !== null) {
                        var result18 = [];
                        var result31 = parse_ws();
                        while (result31 !== null) {
                          result18.push(result31);
                          var result31 = parse_ws();
                        }
                        if (result18 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result19 = ")";
                            pos += 1;
                          } else {
                            var result19 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result19 !== null) {
                            var result20 = [];
                            var result30 = parse_ws();
                            while (result30 !== null) {
                              result20.push(result30);
                              var result30 = parse_ws();
                            }
                            if (result20 !== null) {
                              if (input.substr(pos, 1) === "{") {
                                var result21 = "{";
                                pos += 1;
                              } else {
                                var result21 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"{\"");
                                }
                              }
                              if (result21 !== null) {
                                var result22 = [];
                                var result29 = parse_ws();
                                while (result29 !== null) {
                                  result22.push(result29);
                                  var result29 = parse_ws();
                                }
                                if (result22 !== null) {
                                  var result23 = parse_statements();
                                  if (result23 !== null) {
                                    var result24 = [];
                                    var result28 = parse_ws();
                                    while (result28 !== null) {
                                      result24.push(result28);
                                      var result28 = parse_ws();
                                    }
                                    if (result24 !== null) {
                                      if (input.substr(pos, 1) === "}") {
                                        var result25 = "}";
                                        pos += 1;
                                      } else {
                                        var result25 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"}\"");
                                        }
                                      }
                                      if (result25 !== null) {
                                        var result26 = [];
                                        var result27 = parse_ws();
                                        while (result27 !== null) {
                                          result26.push(result27);
                                          var result27 = parse_ws();
                                        }
                                        if (result26 !== null) {
                                          var result11 = [result13, result14, result15, result16, result17, result18, result19, result20, result21, result22, result23, result24, result25, result26];
                                        } else {
                                          var result11 = null;
                                          pos = savedPos3;
                                        }
                                      } else {
                                        var result11 = null;
                                        pos = savedPos3;
                                      }
                                    } else {
                                      var result11 = null;
                                      pos = savedPos3;
                                    }
                                  } else {
                                    var result11 = null;
                                    pos = savedPos3;
                                  }
                                } else {
                                  var result11 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result11 = null;
                                pos = savedPos3;
                              }
                            } else {
                              var result11 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result11 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result11 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result11 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result11 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result11 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
              var result12 = result11 !== null
                ? (function(expr, body) { return { tag:"repeat", expr:expr, body:body }; })(result11[4], result11[10])
                : null;
              if (result12 !== null) {
                var result10 = result12;
              } else {
                var result10 = null;
                pos = savedPos2;
              }
              if (result10 !== null) {
                var result0 = result10;
              } else {
                var savedPos0 = pos;
                var savedPos1 = pos;
                var result4 = parse_comparative();
                if (result4 !== null) {
                  var result5 = [];
                  var result9 = parse_ws();
                  while (result9 !== null) {
                    result5.push(result9);
                    var result9 = parse_ws();
                  }
                  if (result5 !== null) {
                    if (input.substr(pos, 1) === ";") {
                      var result6 = ";";
                      pos += 1;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("\";\"");
                      }
                    }
                    if (result6 !== null) {
                      var result7 = [];
                      var result8 = parse_ws();
                      while (result8 !== null) {
                        result7.push(result8);
                        var result8 = parse_ws();
                      }
                      if (result7 !== null) {
                        var result2 = [result4, result5, result6, result7];
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
                var result3 = result2 !== null
                  ? (function(expr) { return expr; })(result2[0])
                  : null;
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comp_op() {
        var cacheKey = 'comp_op@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "<=") {
          var result6 = "<=";
          pos += 2;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"<=\"");
          }
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 2) === ">=") {
            var result5 = ">=";
            pos += 2;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\">=\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos, 2) === "!=") {
              var result4 = "!=";
              pos += 2;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"!=\"");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos, 2) === "==") {
                var result3 = "==";
                pos += 2;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\"==\"");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos, 1) === "<") {
                  var result2 = "<";
                  pos += 1;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"<\"");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos, 1) === ">") {
                    var result1 = ">";
                    pos += 1;
                  } else {
                    var result1 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">\"");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comparative() {
        var cacheKey = 'comparative@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_additive();
        if (result5 !== null) {
          var result6 = [];
          var result11 = parse_ws();
          while (result11 !== null) {
            result6.push(result11);
            var result11 = parse_ws();
          }
          if (result6 !== null) {
            var result7 = parse_comp_op();
            if (result7 !== null) {
              var result8 = [];
              var result10 = parse_ws();
              while (result10 !== null) {
                result8.push(result10);
                var result10 = parse_ws();
              }
              if (result8 !== null) {
                var result9 = parse_comparative();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(left, op, right) { return {tag: op, left:left, right:right}; })(result3[0], result3[2], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_additive();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_additive_op() {
        var cacheKey = 'additive_op@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[+\-]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[+\\-]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_additive() {
        var cacheKey = 'additive@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_multiplicative();
        if (result5 !== null) {
          var result6 = [];
          var result11 = parse_ws();
          while (result11 !== null) {
            result6.push(result11);
            var result11 = parse_ws();
          }
          if (result6 !== null) {
            var result7 = parse_additive_op();
            if (result7 !== null) {
              var result8 = [];
              var result10 = parse_ws();
              while (result10 !== null) {
                result8.push(result10);
                var result10 = parse_ws();
              }
              if (result8 !== null) {
                var result9 = parse_additive();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(left, op, right) { return { tag: op, left: left, right: right }; })(result3[0], result3[2], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_multiplicative();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_mult_op() {
        var cacheKey = 'mult_op@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[*\/]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[*\\/]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_multiplicative() {
        var cacheKey = 'multiplicative@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_primary();
        if (result5 !== null) {
          var result6 = [];
          var result11 = parse_ws();
          while (result11 !== null) {
            result6.push(result11);
            var result11 = parse_ws();
          }
          if (result6 !== null) {
            var result7 = parse_mult_op();
            if (result7 !== null) {
              var result8 = [];
              var result10 = parse_ws();
              while (result10 !== null) {
                result8.push(result10);
                var result10 = parse_ws();
              }
              if (result8 !== null) {
                var result9 = parse_multiplicative();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(left, op, right) { return { tag: op, left: left, right: right }; })(result3[0], result3[2], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_primary();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[0-9a-zA-Z_]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9a-zA-Z_]");
            }
          }
          if (result5 !== null) {
            var result4 = [];
            while (result5 !== null) {
              result4.push(result5);
              if (input.substr(pos).match(/^[0-9a-zA-Z_]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9a-zA-Z_]");
                }
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(firstchar, chars) { return firstchar + chars.join(''); })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_primary() {
        var cacheKey = 'primary@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result37 = parse_number();
        if (result37 !== null) {
          var result0 = result37;
        } else {
          var savedPos5 = pos;
          var savedPos6 = pos;
          var result30 = parse_identifier();
          if (result30 !== null) {
            var result31 = [];
            var result36 = parse_ws();
            while (result36 !== null) {
              result31.push(result36);
              var result36 = parse_ws();
            }
            if (result31 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result32 = "(";
                pos += 1;
              } else {
                var result32 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result32 !== null) {
                var result33 = [];
                var result35 = parse_ws();
                while (result35 !== null) {
                  result33.push(result35);
                  var result35 = parse_ws();
                }
                if (result33 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result34 = ")";
                    pos += 1;
                  } else {
                    var result34 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result34 !== null) {
                    var result28 = [result30, result31, result32, result33, result34];
                  } else {
                    var result28 = null;
                    pos = savedPos6;
                  }
                } else {
                  var result28 = null;
                  pos = savedPos6;
                }
              } else {
                var result28 = null;
                pos = savedPos6;
              }
            } else {
              var result28 = null;
              pos = savedPos6;
            }
          } else {
            var result28 = null;
            pos = savedPos6;
          }
          var result29 = result28 !== null
            ? (function(v) { return {tag:"call", name:v, args:[]}; })(result28[0])
            : null;
          if (result29 !== null) {
            var result27 = result29;
          } else {
            var result27 = null;
            pos = savedPos5;
          }
          if (result27 !== null) {
            var result0 = result27;
          } else {
            var savedPos3 = pos;
            var savedPos4 = pos;
            var result17 = parse_identifier();
            if (result17 !== null) {
              var result18 = [];
              var result26 = parse_ws();
              while (result26 !== null) {
                result18.push(result26);
                var result26 = parse_ws();
              }
              if (result18 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result19 = "(";
                  pos += 1;
                } else {
                  var result19 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result19 !== null) {
                  var result20 = [];
                  var result25 = parse_ws();
                  while (result25 !== null) {
                    result20.push(result25);
                    var result25 = parse_ws();
                  }
                  if (result20 !== null) {
                    var result21 = parse_arglist();
                    if (result21 !== null) {
                      var result22 = [];
                      var result24 = parse_ws();
                      while (result24 !== null) {
                        result22.push(result24);
                        var result24 = parse_ws();
                      }
                      if (result22 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result23 = ")";
                          pos += 1;
                        } else {
                          var result23 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result23 !== null) {
                          var result15 = [result17, result18, result19, result20, result21, result22, result23];
                        } else {
                          var result15 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result15 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result15 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result15 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result15 = null;
                  pos = savedPos4;
                }
              } else {
                var result15 = null;
                pos = savedPos4;
              }
            } else {
              var result15 = null;
              pos = savedPos4;
            }
            var result16 = result15 !== null
              ? (function(v, args) { return {tag:"call", name:v, args:args}; })(result15[0], result15[4])
              : null;
            if (result16 !== null) {
              var result14 = result16;
            } else {
              var result14 = null;
              pos = savedPos3;
            }
            if (result14 !== null) {
              var result0 = result14;
            } else {
              var savedPos2 = pos;
              var result12 = parse_identifier();
              var result13 = result12 !== null
                ? (function(v) { return { tag:"ident", name: v }; })(result12)
                : null;
              if (result13 !== null) {
                var result11 = result13;
              } else {
                var result11 = null;
                pos = savedPos2;
              }
              if (result11 !== null) {
                var result0 = result11;
              } else {
                var savedPos0 = pos;
                var savedPos1 = pos;
                if (input.substr(pos, 1) === "(") {
                  var result4 = "(";
                  pos += 1;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result4 !== null) {
                  var result5 = [];
                  var result10 = parse_ws();
                  while (result10 !== null) {
                    result5.push(result10);
                    var result10 = parse_ws();
                  }
                  if (result5 !== null) {
                    var result6 = parse_comparative();
                    if (result6 !== null) {
                      var result7 = [];
                      var result9 = parse_ws();
                      while (result9 !== null) {
                        result7.push(result9);
                        var result9 = parse_ws();
                      }
                      if (result7 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result8 = ")";
                          pos += 1;
                        } else {
                          var result8 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result8 !== null) {
                          var result2 = [result4, result5, result6, result7, result8];
                        } else {
                          var result2 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
                var result3 = result2 !== null
                  ? (function(expr) { return expr; })(result2[2])
                  : null;
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comma_expression() {
        var cacheKey = 'comma_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === ",") {
          var result3 = ",";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\",\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_ws();
          if (result4 !== null) {
            var result5 = parse_comparative();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr) { return expr; })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arglist() {
        var cacheKey = 'arglist@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_comparative();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_comma_expression();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_comma_expression();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(first, rest) { return [first].concat(rest); })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number_frac() {
        var cacheKey = 'number_frac@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === ".") {
          var result3 = ".";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\".\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(chars) { return "." + chars.join(''); })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number() {
        var cacheKey = 'number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "-") {
          var result8 = "-";
          pos += 1;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        var result3 = result8 !== null ? result8 : '';
        if (result3 !== null) {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result7 !== null) {
            var result4 = [];
            while (result7 !== null) {
              result4.push(result7);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result6 = parse_number_frac();
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(sign, chars, frac) { return parseFloat(sign + chars.join('') + frac); })(result1[0], result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ws() {
        var cacheKey = 'ws@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ \r\n	]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ \\r\\n	]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
