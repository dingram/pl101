{
	tempo = 60;
	tempo_base = 4;

	function flatten(array){
			var flat = [];
			for (var i = 0, l = array.length; i < l; i++){
					var type = Object.prototype.toString.call(array[i]).split(' ').pop().split(']').shift().toLowerCase();
					if (type) { flat = flat.concat(/^(array|collection|arguments|object)$/.test(type) ? flatten(array[i]) : array[i]); }
			}
			return flat;
	}
}

start =
	ws* n:notelist ws* { return n; }

notelist =
	tempo ws+ l:notelist
		{ /* do not return tempo objects */ return l; }
	/ n:noteitem ws+ l:notelist
		{ return {tag:'seq', left:n, right: l} }
	/ noteitem

tempo =
	'tempo' ws+ b:int ws* '=' ws* t:int
		{ tempo_base = b; tempo = t; return {tag: 'tempo', base:b, tempo:t}; }
	/ 'tempo' ws+ t:int
		{ tempo_base = 4; tempo = t; return {tag: 'tempo', base:4, tempo:t}; }

noteitem =
	note
	/ extpargroup
	/ pargroup

note =
	note_dur
	/ note_len

note_len =
	pitch:([a-g][#b]*[0-9]) ':' dur:int
		{
			pitch = flatten(pitch).join('');
			dur = (60000 * tempo_base) / (dur * tempo);
			return { tag: 'note', pitch: pitch, dur: dur };
		}

note_dur =
	pitch:([a-g][#b]*[0-9]) '/' dur:float
		{ pitch = flatten(pitch).join(''); return { tag: 'note', pitch: pitch, dur: dur }; }


pargroup = '<' ws* l:parlist ws* '>' { return l; }

parlist =
	n:noteitem ws+ l:parlist
		{ return {tag:'par', left: n, right: l} }
	/ noteitem

extpargroup = '<<' ws* l:extparlist ws* '>>' { return l; }

extparlist =
        s:seqgroup ws* l:extparlist
		{ return {tag:'par', left: s, right: l} }
        / seqgroup
	/ n:noteitem ws+ l:parlist
		{ return {tag:'par', left: n, right: l} }
	/ noteitem

seqgroup = '{' ws* s:notelist ws* '}'
		{ return s; }

float = x:int ( "." y:zint )? { if (typeof y != 'undefined') return parseFloat(x+'.'+y); else return x; }
int = x:([1-9][0-9]*) { x = flatten(x).join(''); return parseInt(x, 10); }
zint = x:([0-9]+) { flatten(x).join(''); return parseInt(x, 10); }

ws = 
	[ \t\n\r]+
