{
	var tempo = 60;
	var tempo_base = 4;
	var last_octave = 0;
	var last_duration = 0;
	var last_len = 0;

	var durFromLen = function (len) {
		return (60000 * tempo_base) / (len * tempo);
	}

	var flatten = function (array){
			var flat = [];
			for (var i = 0, l = array.length; i < l; i++){
					var type = Object.prototype.toString.call(array[i]).split(' ').pop().split(']').shift().toLowerCase();
					if (type) { flat = flat.concat(/^(array|collection|arguments|object)$/.test(type) ? flatten(array[i]) : array[i]); }
			}
			return flat;
	}

	var pargen = function(input, dur, len) {
		var par = create_empty_par(input.length);
		par = fill_par(par, dur, len, input);
		return par;
	};

	var create_empty_par = function(len) {
		if (len <= 1) {
			return {};
		} else {
			// bias to heavy right -- swap ceil/floor for heavy left
			return { tag: 'par', left: create_empty_par(Math.floor(len/2)), right: create_empty_par(Math.ceil(len/2)) };
		}
	};

	var fill_par = function(par, dur, len, notes) {
		if (par === null || !('tag' in par)) {
			par = {tag: 'note', pitch: notes.shift(), dur: dur};
			if (len !== null) par.len = len;
		} else {
			par.left = fill_par(par.left, dur, len, notes);
			par.right = fill_par(par.right, dur, len, notes);
		}
		return par;
	};
}

start =
	ws* n:notelist ws* { return n; }

notelist =
	c:command ws+ l:notelist
		{ return {tag:'seq', left:c, right:l}; }
	/ ghost_command ws+ l:notelist
		{ /* do not return ghost command objects */ return l; }
	/ n:noteitem ws+ l:notelist
		{ return {tag:'seq', left:n, right: l} }
	/ noteitem

command = '\\' c:cmd_name { return c; }

ghost_command = '\\' c:ghost_cmd_name { return c; }

cmd_name =
	time_sig_cmd
	/ key_sig_cmd
	/ clef_cmd
	/ voice_cmd

ghost_cmd_name =
	tempo_cmd

tempo_cmd =
	'tempo' ws+ b:int ws* '=' ws* t:int
		{ tempo_base = b; tempo = t; return {tag: 'tempo', base:b, tempo:t}; }
	/ 'tempo' ws+ t:int
		{ tempo_base = 4; tempo = t; return {tag: 'tempo', base:4, tempo:t}; }

time_sig_cmd =
	('timesig'/'time') ws+ t:int ws* '/' ws* b:int
		{ return {tag: 'timesig', beats:t, base:b}; }

key_sig_cmd =
	('keysig'/'key') ws+ p:pitch 'm'
		{ return {tag: 'keysig', pitch:p, minor:true}; }
	/ ('keysig'/'key') ws+ p:pitch
		{ return {tag: 'keysig', pitch:p, minor:false}; }

clef_cmd =
	'clef' ws+ t:('treble' / 'bass' / 'alto' / 'tenor')
		{ return {tag: 'clef', type:t}; }

voice_cmd =
	'voice' ws+ v:int ws+ '{' ws* l:notelist ws* '}'
		{ return {tag: 'voice', voice:v, section:l}; }

noteitem =
	note
	/ rest
	/ extpargroup
	/ pargroup
	/ repeatgroup

rest =
	rest_dur
	/ rest_len

rest_len =
	'r' ':'? len:int
		{ last_duration = durFromLen(len); last_len = len; return { tag: 'rest', dur: last_duration, len: last_len }; }

rest_dur =
	'r/' dur:float
		{ last_duration = dur; last_len = null; return { tag: 'rest', dur: last_duration }; }

rest_nolen =
	'r'
		{ var d = { tag: 'rest', dur: last_duration }; if (last_len !== null) d.len=last_len; return d; }

note =
	note_dur
	/ note_len
	/ note_nolen

note_len =
	pitch:pitch ':' len:length
		{ last_duration = durFromLen(len); last_len = len; return { tag: 'note', pitch: pitch, dur: last_duration, len: last_len }; }

note_dur =
	pitch:pitch '/' dur:float
		{ last_duration = dur; last_len = null; return { tag: 'note', pitch: pitch, dur: last_duration }; }

note_nolen =
	pitch:pitch
		{ var d = { tag: 'note', pitch: pitch, dur: last_duration }; if (last_len !== null) d.len=last_len; return d; }

pitch =
	p:([a-g]i[#b]*[0-9])
		{ last_octave = p[p.length-1]; return flatten(p).join(''); }
	/ p:([a-g]i[#b]*)
		{ return flatten(p).join('') + last_octave; }

length =
	n:power_ii '...'
		{ return parseInt(n, 10) * (1 + 0.5 + 0.25 + 0.125); }
	/ n:power_ii '..'
		{ return parseInt(n, 10) * (1 + 0.5 + 0.25); }
	/ n:power_ii '.'
		{ return parseInt(n, 10) * (1 + 0.5); }
	/ n:power_ii
		{ return parseInt(n, 10); }

power_ii = '128' / '64' / '32' / '16' / '8' / '4' / '2' / '1'


pargroup =
	p:parblock ':' len:length
		{ last_duration = durFromLen(len); last_len = len; return pargen(p, last_duration, last_len); }
	/ p:parblock '/' dur:float
		{ last_duration = dur; last_len = null; return pargen(p, last_duration, null); }
	/ p:parblock
		{ return pargen(p, last_duration, last_len); }

parblock = '<' ws* l:parlist ws* '>' { return l; }

parlist =
	p:pitch ws+ l:parlist
		{ return [p].concat(l); }
	/ p:pitch
		{ return [p]; }

extpargroup = '<<' ws* l:extparlist ws* '>>' { return l; }

extparlist =
	s:seqgroup ws* l:extparlist
		{ return {tag:'par', left: s, right: l} }
	/ seqgroup
	/ n:noteitem ws+ l:extparlist
		{ return {tag:'par', left: n, right: l} }
	/ noteitem

seqgroup = '{' ws* s:notelist ws* '}'
		{ return s; }

repeatgroup =
	l:repeatblock ws* '(' n:int ')'
		{ return {tag: 'repeat', section: l, count: n}; }
	/ l:repeatblock
		{ return {tag: 'repeat', section: l, count: 2}; }

repeatblock = '|:' ws* l:notelist ws* ':|' { return l; }



float = x:int ( "." y:zint )? { if (typeof y != 'undefined') return parseFloat(x+'.'+y); else return x; }
int = x:([1-9][0-9]*) { x = flatten(x).join(''); return parseInt(x, 10); }
zint = x:([0-9]+) { flatten(x).join(''); return parseInt(x, 10); }

ws =
	[ \t\n\r]+
	/ '/*' (!'*/' .)* '*/'
	/ '%{' (!'%}' .)* '%}'
	/ '%' [^\r\n]*
