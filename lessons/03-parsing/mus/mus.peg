{
	var tempo = 60;
	var tempo_base = 4;
	var last_octave = 0;
	var last_duration = 0;
	var last_len = 0;

	var durFromLen = function (len) {
		return (60000 * tempo_base) / (len * tempo);
	}

	var flatten = function (array){
			var flat = [];
			for (var i = 0, l = array.length; i < l; i++){
					var type = Object.prototype.toString.call(array[i]).split(' ').pop().split(']').shift().toLowerCase();
					if (type) { flat = flat.concat(/^(array|collection|arguments|object)$/.test(type) ? flatten(array[i]) : array[i]); }
			}
			return flat;
	}

	var pargen = function(input, dur, len) {
		var par = create_empty_par(input.length);
		par = fill_par(par, dur, len, input);
		return par;
	};

	var create_empty_par = function(len) {
		if (len <= 1) {
			return {};
		} else {
			// bias to heavy right -- swap ceil/floor for heavy left
			return { tag: 'par', left: create_empty_par(Math.floor(len/2)), right: create_empty_par(Math.ceil(len/2)) };
		}
	};

	var fill_par = function(par, dur, len, notes) {
		if (par === null || !('tag' in par)) {
			par = {tag: 'note', pitch: notes.shift(), dur: dur};
			if (len !== null) par.len = len;
		} else {
			par.left = fill_par(par.left, dur, len, notes);
			par.right = fill_par(par.right, dur, len, notes);
		}
		return par;
	};
}

start =
	ws* n:notelist ws* { return n; }

notelist =
	c:command ws+ l:notelist
		{ return {tag:'seq', left:c, right:l}; }
	/ n:noteitem ws+ l:notelist
		{ return {tag:'seq', left:n, right: l} }
	/ noteitem

command = '\\' c:cmd_name { return c; }

cmd_name =
	time_sig_cmd
	/ key_sig_cmd
	/ clef_cmd
	/ instrument_cmd
	/ voice_cmd
	/ tempo_cmd
	/ triplet_cmd
	/ swung_cmd

triplet_cmd =
	'triplet' ws* '{' ws* one:playable ws+ two:playable ws+ three:playable ws* '}'
		{
			one.dur *= 2; one.dur /= 3; if (one.len) { one.len /= 2; one.len *= 3; }
			two.dur *= 2; two.dur /= 3; if (two.len) { two.len /= 2; two.len *= 3; }
			three.dur *= 2; three.dur /= 3; if (three.len) { three.len /= 2; three.len *= 3; }
			return {tag: 'seq', left:one, right:{tag: 'seq', left:two, right:three}};
		}
	/ 'triplet' ws+ one:playable ws+ two:playable ws+ three:playable
		{
			one.dur *= 2; one.dur /= 3; if (one.len) { one.len /= 2; one.len *= 3; }
			two.dur *= 2; two.dur /= 3; if (two.len) { two.len /= 2; two.len *= 3; }
			three.dur *= 2; three.dur /= 3; if (three.len) { three.len /= 2; three.len *= 3; }
			return {tag: 'seq', left:one, right:{tag: 'seq', left:two, right:three}};
		}

swung_cmd =
	'swung' ws* '{' ws* one:playable ws+ two:playable ws* '}'
		{
			one.dur *= 1.5; if (one.len) { one.len /= 1.5; }
			two.dur /= 2; if (two.len) { two.len *= 2; }
			return {tag: 'seq', left:one, right:two};
		}
	/ 'swung' ws+ one:playable ws+ two:playable
		{
			one.dur *= 1.5; if (one.len) { one.len /= 1.5; }
			two.dur /= 2; if (two.len) { two.len *= 2; }
			return {tag: 'seq', left:one, right:two};
		}

tempo_cmd =
	'tempo' ws+ b:int ws* '=' ws* t:int
		{ tempo_base = b; tempo = t; return {tag: 'tempo', base:b, tempo:t}; }
	/ 'tempo' ws+ t:int
		{ tempo_base = 4; tempo = t; return {tag: 'tempo', base:4, tempo:t}; }

time_sig_cmd =
	('timesig'/'time') ws+ t:int ws* '/' ws* b:int
		{ return {tag: 'timesig', beats:t, base:b}; }

key_sig_cmd =
	('keysig'/'key') ws+ p:pitch 'm'
		{ return {tag: 'keysig', pitch:p, minor:true}; }
	/ ('keysig'/'key') ws+ p:pitch
		{ return {tag: 'keysig', pitch:p, minor:false}; }

clef_cmd =
	'clef' ws+ t:('treble' / 'bass' / 'alto' / 'tenor')
		{ return {tag: 'clef', type:t}; }

voice_cmd =
	'voice' ws+ v:int ws+ '{' ws* l:notelist ws* '}'
		{ return {tag: 'voice', voice:v, section:l}; }

instrument_cmd =
	'instrument' ws+ v:int
		{ return {tag: 'instrument', patch:v}; }
	/ 'instrument' ws+ '"' v:instrument_name '"'
		{ return {tag: 'instrument', patch:v}; }

noteitem =
	playable
	/ extpargroup
	/ repeatgroup

playable =
	note
	/ rest
	/ pargroup

rest =
	rest_dur
	/ rest_len
	/ rest_nolen

rest_len =
	'r' ':'? len:int
		{ last_duration = durFromLen(len); last_len = len; return { tag: 'rest', dur: last_duration, len: last_len }; }

rest_dur =
	'r/' dur:float
		{ last_duration = dur; last_len = null; return { tag: 'rest', dur: last_duration }; }

rest_nolen =
	'r'
		{ var d = { tag: 'rest', dur: last_duration }; if (last_len !== null) d.len=last_len; return d; }

note =
	note_dur
	/ note_len
	/ note_nolen

note_len =
	pitch:pitch ':' len:length
		{ last_duration = durFromLen(len); last_len = len; return { tag: 'note', pitch: pitch, dur: last_duration, len: last_len }; }

note_dur =
	pitch:pitch '/' dur:float
		{ last_duration = dur; last_len = null; return { tag: 'note', pitch: pitch, dur: last_duration }; }

note_nolen =
	pitch:pitch
		{ var d = { tag: 'note', pitch: pitch, dur: last_duration }; if (last_len !== null) d.len=last_len; return d; }

pitch =
	p:([a-gA-G][#b]*[0-9])
		{ last_octave = p[p.length-1]; return flatten(p).join(''); }
	/ p:([a-gA-G][#b]*)
		{ return flatten(p).join('') + last_octave; }

length =
	n:power_ii '...'
		{ return parseInt(n, 10) / (1 + 0.5 + 0.25 + 0.125); }
	/ n:power_ii '..'
		{ return parseInt(n, 10) / (1 + 0.5 + 0.25); }
	/ n:power_ii '.'
		{ return parseInt(n, 10) / (1 + 0.5); }
	/ n:power_ii
		{ return parseInt(n, 10); }

power_ii = '128' / '64' / '32' / '16' / '8' / '4' / '2' / '1'


pargroup =
	p:parblock ':' len:length
		{ last_duration = durFromLen(len); last_len = len; return pargen(p, last_duration, last_len); }
	/ p:parblock '/' dur:float
		{ last_duration = dur; last_len = null; return pargen(p, last_duration, null); }
	/ p:parblock
		{ return pargen(p, last_duration, last_len); }

parblock = '<' ws* l:parlist ws* '>' { return l; }

parlist =
	p:pitch ws+ l:parlist
		{ return [p].concat(l); }
	/ p:pitch
		{ return [p]; }

extpargroup = '<<' ws* l:extparlist ws* '>>' { return l; }

extparlist =
	s:seqgroup ws* l:extparlist
		{ return {tag:'par', left: s, right: l} }
	/ seqgroup
	/ n:noteitem ws+ l:extparlist
		{ return {tag:'par', left: n, right: l} }
	/ noteitem

seqgroup = '{' ws* s:notelist ws* '}'
		{ return s; }

repeatgroup =
	l:repeatblock ws* '(' n:int ')'
		{ return {tag: 'repeat', section: l, count: n}; }
	/ l:repeatblock
		{ return {tag: 'repeat', section: l, count: 2}; }

repeatblock = '|:' ws* l:notelist ws* ':|' { return l; }



float = x:int ( "." y:zint )? { if (typeof y != 'undefined') return parseFloat(x+'.'+y); else return x; }
int = x:([1-9][0-9]*) { x = flatten(x).join(''); return parseInt(x, 10); }
zint = x:([0-9]+) { flatten(x).join(''); return parseInt(x, 10); }

ws =
	[ \t\n\r]+
	/ '/*' (!'*/' .)* '*/'
	/ '%{' (!'%}' .)* '%}'
	/ '%' [^\r\n]*


instrument_name =
	('piano' / 'acoustic grand') { return 1; }
	/ 'bright acoustic'          { return 2; }
	/ 'electric grand'           { return 3; }
	/ 'honky-tonk'               { return 4; }
	/ 'electric piano 1'         { return 5; }
	/ 'electric piano 2'         { return 6; }
	/ 'harpsichord'              { return 7; }
	/ 'clav'                     { return 8; }
	/ 'celesta'                  { return 9; }
	/ 'glockenspiel'             { return 10; }
	/ 'music box'                { return 11; }
	/ 'vibraphone'               { return 12; }
	/ 'marimba'                  { return 13; }
	/ 'xylophone'                { return 14; }
	/ 'tubular bells'            { return 15; }
	/ 'dulcimer'                 { return 16; }
	/ 'drawbar organ'            { return 17; }
	/ 'percussive organ'         { return 18; }
	/ 'rock organ'               { return 19; }
	/ 'church organ'             { return 20; }
	/ 'reed organ'               { return 21; }
	/ 'accordion'                { return 22; }
	/ 'harmonica'                { return 23; }
	/ 'concertina'               { return 24; }
	/ 'acoustic guitar (nylon)'  { return 25; }
	/ 'acoustic guitar (steel)'  { return 26; }
	/ 'electric guitar (jazz)'   { return 27; }
	/ 'electric guitar (clean)'  { return 28; }
	/ 'electric guitar (muted)'  { return 29; }
	/ 'overdriven guitar'        { return 30; }
	/ 'distorted guitar'         { return 31; }
	/ 'guitar harmonics'         { return 32; }
	/ 'acoustic bass'            { return 33; }
	/ 'electric bass (finger)'   { return 34; }
	/ 'electric bass (pick)'     { return 35; }
	/ 'fretless bass'            { return 36; }
	/ 'slap bass 1'              { return 37; }
	/ 'slap bass 2'              { return 38; }
	/ 'synth bass 1'             { return 39; }
	/ 'synth bass 2'             { return 40; }
	/ 'violin'                   { return 41; }
	/ 'viola'                    { return 42; }
	/ 'cello'                    { return 43; }
	/ 'contrabass'               { return 44; }
	/ 'tremolo strings'          { return 45; }
	/ 'pizzicato strings'        { return 46; }
	/ 'orchestral strings'       { return 47; }
	/ 'timpani'                  { return 48; }
	/ 'string ensemble 1'        { return 49; }
	/ 'string ensemble 2'        { return 50; }
	/ 'synthstrings 1'           { return 51; }
	/ 'synthstrings 2'           { return 52; }
	/ 'choir aahs'               { return 53; }
	/ 'voice oohs'               { return 54; }
	/ 'synth voice'              { return 55; }
	/ 'orchestra hit'            { return 56; }
	/ 'trumpet'                  { return 57; }
	/ 'trombone'                 { return 58; }
	/ 'tuba'                     { return 59; }
	/ 'muted trumpet'            { return 60; }
	/ 'french horn'              { return 61; }
	/ 'brass section'            { return 62; }
	/ 'synthbrass 1'             { return 63; }
	/ 'synthbrass 2'             { return 64; }
	/ 'soprano sax'              { return 65; }
	/ 'alto sax'                 { return 66; }
	/ 'tenor sax'                { return 67; }
	/ 'baritone sax'             { return 68; }
	/ 'oboe'                     { return 69; }
	/ 'english horn'             { return 70; }
	/ 'bassoon'                  { return 71; }
	/ 'clarinet'                 { return 72; }
	/ 'piccolo'                  { return 73; }
	/ 'flute'                    { return 74; }
	/ 'recorder'                 { return 75; }
	/ 'pan flute'                { return 76; }
	/ 'blown bottle'             { return 77; }
	/ 'shakuhachi'               { return 78; }
	/ 'whistle'                  { return 79; }
	/ 'ocarina'                  { return 80; }
	/ 'lead 1 (square)'          { return 81; }
	/ 'lead 2 (sawtooth)'        { return 82; }
	/ 'lead 3 (calliope)'        { return 83; }
	/ 'lead 4 (chiff)'           { return 84; }
	/ 'lead 5 (charang)'         { return 85; }
	/ 'lead 6 (voice)'           { return 86; }
	/ 'lead 7 (fifths)'          { return 87; }
	/ 'lead 8 (bass+lead)'       { return 88; }
	/ 'pad 1 (new age)'          { return 89; }
	/ 'pad 2 (warm)'             { return 90; }
	/ 'pad 3 (polysynth)'        { return 91; }
	/ 'pad 4 (choir)'            { return 92; }
	/ 'pad 5 (bowed)'            { return 93; }
	/ 'pad 6 (metallic)'         { return 94; }
	/ 'pad 7 (halo)'             { return 95; }
	/ 'pad 8 (sweep)'            { return 96; }
	/ 'fx 1 (rain)'              { return 97; }
	/ 'fx 2 (soundtrack)'        { return 98; }
	/ 'fx 3 (crystal)'           { return 99; }
	/ 'fx 4 (atmosphere)'        { return 100; }
	/ 'fx 5 (brightness)'        { return 101; }
	/ 'fx 6 (goblins)'           { return 102; }
	/ 'fx 7 (echoes)'            { return 103; }
	/ 'fx 8 (sci-fi)'            { return 104; }
	/ 'sitar'                    { return 105; }
	/ 'banjo'                    { return 106; }
	/ 'shamisen'                 { return 107; }
	/ 'koto'                     { return 108; }
	/ 'kalimba'                  { return 109; }
	/ 'bagpipe'                  { return 110; }
	/ 'fiddle'                   { return 111; }
	/ 'shanai'                   { return 112; }
	/ 'tinkle bell'              { return 113; }
	/ 'agogo'                    { return 114; }
	/ 'steel drums'              { return 115; }
	/ 'woodblock'                { return 116; }
	/ 'taiko drum'               { return 117; }
	/ 'melodic tom'              { return 118; }
	/ 'synth drum'               { return 119; }
	/ 'reverse cymbal'           { return 120; }
	/ 'guitar fret noise'        { return 121; }
	/ 'breath noise'             { return 122; }
	/ 'seashore'                 { return 123; }
	/ 'bird tweet'               { return 124; }
	/ 'telephone ring'           { return 125; }
	/ 'helicopter'               { return 126; }
	/ 'applause'                 { return 127; }
	/ 'gunshot'                  { return 128; }
